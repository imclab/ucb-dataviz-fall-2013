setwd("~/NYT projects/2013-09-18-nfl-starters/r-work/")#
setwd("~/NYT-projects/nfl-starters/r-work/")#
# need a list of players.#
library(stringr)#
library(XML)#
#
load("data/starts.Rdata")#
load("data/weeks.Rdata")#
load("data/roster.Rdata")
setwd("~/NYT projects/2013-09-18-nfl-starters/r-work/")
setwd("~/NYT projects/2013-09-18-nfl-starters/r-work/")#
setwd("~/NYT-projects/nfl-starters/r-work/")#
# need a list of players.#
library(stringr)#
library(XML)#
#
load("data/starts.Rdata")#
load("data/weeks.Rdata")#
load("data/roster.Rdata")
head(roster)
head(a2)
a2 <- aggregate(roster$year, list(player2 = roster$player2, playerid = roster$playerid), min )#
names(a2)[3] <- "startyear"
head(a2)
head(starts)
starts <- merge(starts, a2, by="playerid")#
# starts <- subset(starts, startyear >=2004)#
starts <- merge(starts, weeks, by="date2", all.x=TRUE)
head(starts)
subset(starts, teamcode=="bif")
subset(starts, teamcode=="buf")
subset(starts, teamcode=="buf" & season == 2013)
teams_url <- "http://www.pro-football-reference.com/teams/"#
page <- htmlTreeParse(readLines(teams_url), useInternalNodes=T)#
first_col_link <- getNodeSet(page, "//table[@id='teams_active']//tr//td[1]//a")#
team_names <- sapply(first_col_link , xmlValue)#
team_codes <- gsub("\\/|teams", "", sapply(first_col_link, xmlGetAttr, "href"))#
#
lookup <- data.frame(longname=team_names, franchise_code = team_codes)#
#
lookup$start_year <- NA#
#
# find the codes for the box scores of each game of each year since 1970#
for (i in lookup$franchise_code) {#
  print(i)#
  print("-------")#
  this_team_franchise_code <- i#
  base_team_url <- paste("http://www.pro-football-reference.com/teams/", this_team_franchise_code, sep="")#
  team_historical_schedule_page <- htmlTreeParse(readLines(base_team_url), useInternalNodes = T)#
  #go back to 1970 unless you started after that.#
  start_year <- max(c(min(as.numeric(as.character((readHTMLTable(team_historical_schedule_page)$team_index$Year)))), 1970))#
#
  lookup$start_year[lookup$franchise_code==i] <- start_year#
}
head(lookup)
tail(lookup)
subset(lookup, franchise# fetch a team scheule for a given team code and year#
get_schedule_for_team_and_year <- function(code, year) {#
#
  url <- paste("http://www.pro-football-reference.com/teams/", code, "/", year, "_games.htm", sep="")#
  page <- htmlTreeParse(readLines(url), useInternalNodes = T)#
  weekid <- sapply(getNodeSet(page, "//div[@id='div_team_gamelogs']//table//td[1]"), xmlValue)#
  day <- sapply(getNodeSet(page, "//div[@id='div_team_gamelogs']//table//td[2]"), xmlValue)#
  date <- sapply(getNodeSet(page, "//div[@id='div_team_gamelogs']//table//td[3]"), xmlValue)#
  temp <- readHTMLTable(getNodeSet(page, "//table[@class='sortable  stats_table']")[[1]])#
  names(temp)[4] <- "boxscore"#
  boxlinks <- getNodeSet(page, "//table[@class='sortable  stats_table'][1]//tr//td[4]//a")#
  temp$link <- NA#
  temp$link[temp$boxscore=="boxscore"] <- sapply(boxlinks, xmlGetAttr, "href")#
  sked <- data.frame(week = weekid, day=day, date=date, gameurl = temp$link, code=code, year=year)#
  return (sked)#
}#
#
# fetch a team scheule for a given team code and year#
find_starting_qbs <- function(code, year) {#
#
  url <- paste("http://www.pro-football-reference.com/teams/", code, "/", year, "_roster.htm", sep="")#
  page <- htmlTreeParse(readLines(url), useInternalNodes = T)#
#
  roster <- readHTMLTable(page)$games_played_team#
  names(roster)[2] <- "player_name"#
  roster$year <- year#
  roster$code <- code#
  roster$pos2 <- toupper(roster$Pos)#
#
  urls <- sapply(getNodeSet(page, "//div[@id='all_games_played_team']//table//tr//td[2]//a"), xmlGetAttr, "href")#
#
  roster$url <- urls#
#
  qbs <- subset(roster, pos2 == "QB")#
  return (qbs)#
})
fetch a team scheule for a given team code and year#
get_schedule_for_team_and_year <- function(code, year) {#
#
  url <- paste("http://www.pro-football-reference.com/teams/", code, "/", year, "_games.htm", sep="")#
  page <- htmlTreeParse(readLines(url), useInternalNodes = T)#
  weekid <- sapply(getNodeSet(page, "//div[@id='div_team_gamelogs']//table//td[1]"), xmlValue)#
  day <- sapply(getNodeSet(page, "//div[@id='div_team_gamelogs']//table//td[2]"), xmlValue)#
  date <- sapply(getNodeSet(page, "//div[@id='div_team_gamelogs']//table//td[3]"), xmlValue)#
  temp <- readHTMLTable(getNodeSet(page, "//table[@class='sortable  stats_table']")[[1]])#
  names(temp)[4] <- "boxscore"#
  boxlinks <- getNodeSet(page, "//table[@class='sortable  stats_table'][1]//tr//td[4]//a")#
  temp$link <- NA#
  temp$link[temp$boxscore=="boxscore"] <- sapply(boxlinks, xmlGetAttr, "href")#
  sked <- data.frame(week = weekid, day=day, date=date, gameurl = temp$link, code=code, year=year)#
  return (sked)#
}#
#
# fetch a team scheule for a given team code and year#
find_starting_qbs <- function(code, year) {#
#
  url <- paste("http://www.pro-football-reference.com/teams/", code, "/", year, "_roster.htm", sep="")#
  page <- htmlTreeParse(readLines(url), useInternalNodes = T)#
#
  roster <- readHTMLTable(page)$games_played_team#
  names(roster)[2] <- "player_name"#
  roster$year <- year#
  roster$code <- code#
  roster$pos2 <- toupper(roster$Pos)#
#
  urls <- sapply(getNodeSet(page, "//div[@id='all_games_played_team']//table//tr//td[2]//a"), xmlGetAttr, "href")#
#
  roster$url <- urls#
#
  qbs <- subset(roster, pos2 == "QB")#
  return (qbs)#
}
find_starting_qbs("buf", 2013)
get_team_schedule <- function(code, year) {#
#
  url <- paste("http://www.pro-football-reference.com/teams/", code, "/", year, "_roster.htm", sep="")#
  page <- htmlTreeParse(readLines(url), useInternalNodes = T)#
#
  roster <- readHTMLTable(page)$games_played_team#
  names(roster)[2] <- "player_name"#
  roster$year <- year#
  roster$code <- code#
  roster$pos2 <- toupper(roster$Pos)#
#
  urls <- sapply(getNodeSet(page, "//div[@id='all_games_played_team']//table//tr//td[2]//a"), xmlGetAttr, "href")#
#
  roster$url <- urls#
#
  qbs <- subset(roster, pos2 == "QB")#
  return (qbs)#
}
roster <- NULL#
for (i in lookup$franchise_code) {#
#
  if (i == "cle") {#
    vec <- c(1970:1995, 1999:2013)#
  }#
  else {#
    vec <- lookup$start_year[lookup$franchise_code == i]:2012#
  }#
#
  local <- NULL#
  for (j in vec) {#
    print(paste(i,j,"-----------"))#
    df <- get_team_schedule(i,j)#
#
    local <- rbind(local, df)#
  }#
#
  roster <- rbind(local, roster)#
#
}#
#
roster$player2 <- gsub("\\*|\\+", "", roster$player_name)#
#
roster$playerid <- gsub(".htm", "", sapply(strsplit(roster$url, "/"), function(x) {x[4]}))
dim(roster)
head(roster)
subset(roster, code == "buf" & year == 2013)
subset(roster, code == "buf")
lookup
subset(lookup, year==2013)
subset(roster, year==2013)
i <- "buf"
vec <- lookup$start_year[lookup$franchise_code == i]:2013
df <- get_team_schedule(i,j)
df
j
i
j = 2013
df <- get_team_schedule(i,j)
df
roster <- NULL#
for (i in lookup$franchise_code) {#
#
  if (i == "cle") {#
    vec <- c(1970:1995, 1999:2013)#
  }#
  else {#
    vec <- lookup$start_year[lookup$franchise_code == i]:2013#
  }#
#
  local <- NULL#
  for (j in vec) {#
    print(paste(i,j,"-----------"))#
    df <- get_team_schedule(i,j)#
#
    local <- rbind(local, df)#
  }#
#
  roster <- rbind(local, roster)#
#
}#
#
roster$player2 <- gsub("\\*|\\+", "", roster$player_name)#
#
roster$playerid <- gsub(".htm", "", sapply(strsplit(roster$url, "/"), function(x) {x[4]}))
subset(roster, year==2013)
subset(roster, code == "buf" & year == 2013)
save(roster, file="data/roster.rData")
get_starts_history <- function(playerid) {#
  url <- paste("http://www.pro-football-reference.com/boxscores/game_query.cgi?qb=", playerid, "&yr=", sep="")#
  page <- htmlParse(url)#
  day <- sapply(getNodeSet(page, "//table[@id='games']//tr//td[2]"), xmlValue)#
  date <- sapply(getNodeSet(page, "//table[@id='games']//tr//td[3]"), xmlValue)#
  team <- sapply(getNodeSet(page, "//table[@id='games']//tr//td[5]"), xmlValue)#
  opp <- sapply(getNodeSet(page, "//table[@id='games']//tr//td[7]"), xmlValue)#
  result <- sapply(getNodeSet(page, "//table[@id='games']//tr//td[4]"), xmlValue)#
  boxurl <- sapply(getNodeSet(page, "//table[@id='games']//tr//td[10]//a"), xmlGetAttr, "href")#
  teamcode <- gsub("/teams\\/|.htm|[0-9]|\\/", "", sapply(getNodeSet(page, "//table[@id='games']//tr//td[5]//a"), xmlGetAttr, "href"))#
#
  # df$year <- as.numeric(str_trim(sapply(strsplit(as.character(df$date), ","), function(x) { x[2]})))#
#
  df <- data.frame(day, date, team, opp, result, boxurl, teamcode)#
#
  if (nrow(df) == 0) {#
#
  }#
#
  else {#
    df$playerid <- playerid#
  }#
#
  return (df)#
#
}#
#
get_week_ids <- function(year) {#
#
  url <- paste("http://www.pro-football-reference.com/years/",year,"/games.htm", sep="")#
  page <- htmlParse(url)#
  week <- sapply(getNodeSet(page, "//table[@id='games']//tr//td[1]"), xmlValue)#
  date <- sapply(getNodeSet(page, "//table[@id='games']//tr//td[3]"), xmlValue)#
  df <- data.frame(week, date)#
#
  df$season = year#
#
  return (unique(df))#
}
subset(roster, code == "buf" & year == 2013)
get_starts_history("ManuEJ00")
starts <- NULL#
  for (i in playerids) {#
  print(i)#
  df <- get_starts_history(i)#
  starts <- rbind(starts, df)#
}#
#
starts$date2 <- gsub(",", "", starts$date)
unique(roster$playerid)
starts <- NULL#
  for (i in unique(roster$playerid)) {#
  print(i)#
  df <- get_starts_history(i)#
  starts <- rbind(starts, df)#
}#
#
starts$date2 <- gsub(",", "", starts$date)
head(starts)
save(starts, file="data/starts.Rdata")
load("data/starts.Rdata")#
load("data/weeks.Rdata")#
load("data/roster.Rdata")#
#
# add to this the start year for each player, weed out staarts before 2004, then save#
a2 <- aggregate(roster$year, list(player2 = roster$player2, playerid = roster$playerid), min )#
names(a2)[3] <- "startyear"#
starts <- merge(starts, a2, by="playerid")#
# starts <- subset(starts, startyear >=2004)#
starts <- merge(starts, weeks, by="date2", all.x=TRUE)
head(starts)
min(starts$year)
starts <- subset(starts, year>=1970)
min(starts$year)
subset(starts, year == 2013 & teamcode == "buf")
write.csv(starts, file= file="../data/starts2.csv")
write.csv(starts, file="../data/starts2.csv")
setwd("~personal/j221-fall-2013/classes/maps-intro")
setwd("~/personal/j221-fall-2013/classes/maps-intro")
ls()
data <- read.delim("merged-multirace.txt")
head(data)
sf <- subset(data, county == "San Francisco")
sf
plot(sf$year, sf$pcthispanic, type="l", ylim=c(0,max(data$pcthispanic)), main="Hispanics in San Francisco County")
sf <- sf[order(sf$year), ]#
plot(sf$year, sf$pcthispanic, type="l", ylim=c(0,max(data$pcthispanic)), main="Hispanics in San Francisco County")
data$hispanic_pop <- data$totalpop * data$pcthispanic
ca_hispanic_pop <- aggregate(data$hispanic_pop, list(data$year), sum)#
names(ca_hispanic_pop)#
names(ca_hispanic_pop) <- c("year", "tot_hisp_pop")
total_ca_pop <- aggregate(data$totalpop, list(data$year), sum)#
names(total_ca_pop)#
names(total_ca_pop) <- c("year", "tot_ca_pop")
sf <- susbet(data, county == "San Francisco")#
sf <- sf[order(sf$year),]#
#
plot(sf$pcthispanic, type="l", ylim=c(0,max(data$pcthispanic)) )
state_totals <- merge(total_ca_pop, ca_hispanic_pop, by="year")#
head(state_totals)
state_totals$pcthispanic <- state_totals$tot_hisp_pop/state_totals$tot_ca_pop
plot(state_totals$year, state_totals$pcthispanic, main="Calif. pct Hispanic", ylim=c(0,max(data$pcthispanic)), type="l", col="red", lwd=2)
plot(state_totals$year, state_totals$pcthispanic, main="Calif. pct Hispanic", ylim=c(0,max(data$pcthispanic)), type="l", col="red", lwd=2)#
lines(sf$year, sf$pcthispanic)
selected county#
county_name <- "San Francisco"#
#
#filter#
this_county <- subset(data, county == county_name)#
#
#sort#
this_county <- this_county[order(this_county$year),]#
#
#initial plot command, with state totals in red#
plot(state_totals$year, state_totals$pcthispanic, main="Calif. pct Hispanic", ylim=c(0,max(data$pcthispanic)), type="l", col="red", lwd=2)#
#
#this county.#
lines(this_county$year, this_county$pcthispanic)
plot_lines_for_county <- function(county) {#
  county_name <- county#
  this_county <- subset(data, county == county_name)#
  this_county <- this_county[order(this_county$year),]#
  lines(this_county$year, this_county$pcthispanic)#
}
plot(state_totals$year, state_totals$pcthispanic, main="Calif. pct Hispanic", ylim=c(0,max(data$pcthispanic)), type="l", col="red", lwd=2)#
plot_lines_for_county("Los Angeles")
plot(state_totals$year, state_totals$pcthispanic, main="Calif. pct Hispanic", ylim=c(0,max(data$pcthispanic)), type="l", col="red", lwd=2)#
#
#all the counties#
for (i in unique(data$county)) {#
plot_lines_for_county(i)#
}
plot_weighted_lines_for_county <- function(county) {#
  county_name <- county#
  this_county <- subset(data, county == county_name)#
  this_county <- this_county[order(this_county$year),]#
  lines(this_county$year, this_county$pcthispanic, lwd= this_county$hispanic_pop/100000 )#
#
  y2020 <- subset(this_county, year == 2020)#
  text(y2020$year, y2020$pcthispanic, labels=y2020$county, adj=0, cex=.5)#
}
plot(state_totals$year, state_totals$pcthispanic, main="Calif. pct Hispanic with population sizing", ylim=c(0,max(data$pcthispanic)), type="l", col="red", lwd=2, xlim=c(1980, 2030))#
#
#all the counties#
for (i in unique(data$county)) {#
plot_weighted_lines_for_county(i)#
}
library(maptools)
